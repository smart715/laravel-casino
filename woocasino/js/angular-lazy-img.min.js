angular.module("angularLazyImg", []), angular.module("angularLazyImg").factory("LazyImgMagic", ["$window", "$rootScope", "lazyImgConfig", "lazyImgHelpers", function (n, e, t, o) { "use strict"; function r() { for (var n = y.length - 1; n >= 0; n--) { var e = y[n]; e && o.isElementInView(e.$elem[0], p.offset, m) && (u(e), y.splice(n, 1)) } y.length || s() } function i(n) { z.forEach(function (e) { e[n]("scroll", I), e[n]("touchmove", I) }), f[n]("resize", I), f[n]("resize", d) } function a() { h = !0, setTimeout(function () { r(), i("on") }, 1) } function s() { h = !1, i("off") } function c(n) { var e = y.indexOf(n); -1 !== e && y.splice(e, 1) } function u(n) { var t = new Image; t.onerror = function () { p.errorClass && n.$elem.addClass(p.errorClass), n.errorSrc && l(n.$elem, n.errorSrc), e.$apply(function () { e.$emit("lazyImg:error", n), p.onError(n) }) }, t.onload = function () { l(n.$elem, n.src), p.successClass && n.$elem.addClass(p.successClass), e.$apply(function () { e.$emit("lazyImg:success", n), p.onSuccess(n) }) }, t.src = n.src } function l(n, e) { "img" === n[0].nodeName.toLowerCase() ? n[0].src = e : n.css("background-image", 'url("' + e + '")') } function g(n) { this.$elem = n } var m, f, y, h, p, I, d, z; return y = [], h = !1, p = t.getOptions(), f = angular.element(n), m = o.getWinDimensions(), d = o.throttle(function () { m = o.getWinDimensions() }, 60), p.container = p.containers || p.container, z = p.container ? [].concat(p.container) : [f], I = o.throttle(r, 30), g.prototype.setSource = function (n) { this.src = n, y.unshift(this), a() }, g.prototype.setErrorSource = function (n) { this.errorSrc = n }, g.prototype.removeImage = function () { c(this), y.length || s() }, g.prototype.checkImages = r, g.addContainer = function (n) { s(), z.push(n), a() }, g.removeContainer = function (n) { s(), z.splice(z.indexOf(n), 1), a() }, g }]), angular.module("angularLazyImg").provider("lazyImgConfig", function () { "use strict"; this.options = { offset: 100, errorClass: null, successClass: null, onError: function () { }, onSuccess: function () { } }, this.$get = function () { var n = this.options; return { getOptions: function () { return n } } }, this.setOptions = function (n) { angular.extend(this.options, n) } }), angular.module("angularLazyImg").factory("lazyImgHelpers", ["$window", function (n) { "use strict"; return { isElementInView: function (n, e, t) { var o = n.getBoundingClientRect(); return o.left <= t.width + e && o.right >= 0 - e && o.top <= t.height + e && o.bottom >= 0 - e }, getWinDimensions: function () { return { height: n.innerHeight, width: n.innerWidth } }, throttle: function (n, e, t) { var o, r; return function () { var i = t || this, a = +new Date, s = arguments; o && a < o + e ? (clearTimeout(r), r = setTimeout(function () { o = a, n.apply(i, s) }, e)) : (o = a, n.apply(i, s)) } } } }]), angular.module("angularLazyImg").directive("lazyImg", ["$rootScope", "$log", "LazyImgMagic", function (n, e, t) { "use strict"; return { link: function (e, o, r) { e.lazyImage = new t(o), e.lazyImage.setErrorSource(r.lazyImgError); var i = r.$observe("lazyImg", function (n) { n && (i(), e.lazyImage.setSource(n)) }), a = n.$on("lazyImg:refresh", function () { e.lazyImage.checkImages() }); e.$on("$destroy", function () { e.lazyImage.removeImage(), a() }) }, restrict: "A" } }]).directive("lazyImgContainer", ["LazyImgMagic", function (n) { "use strict"; return { link: function (e, t) { n.addContainer(t), e.$on("$destroy", function () { n.removeContainer(t) }) }, restrict: "A" } }]);